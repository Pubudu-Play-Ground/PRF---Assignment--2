1.
Statically Typed Language - it is a language which checking the data types (int, long, floats, long etc) of declared variables at the compile time. 
Dynamically Typed Language - it is a language which checking the data types of declared variables at the run time(when executing).
Strongly Typed Language - strictly consider about the data types of variables at compiloe time and runtime.  
Loosely Typed Language - doesn't consider about the data type of variables.It allows for implicit type conversions and flexible data type usage. 
java is statically typed and strongly typed language.

2.
Case Sensitive - it is use to differentiate between uppercase and lowercase letters when using identifiers. 
Ex:-, "Java" and "java" would be treated as two different identifiers
case sensitive languages :- C, C++, Java, Swift, JavaScript, Python

Case Insensive - in this type of languages uppercase and lowercase letters are considered equivalent when using identifiers such as variable names. Ex:-, "Java" and "java" would be treated same identifiers
ex:SQL, HTML, CSS, and XML

3.
Identity Conversion - It is a type conversion operation that involves converting a value of a specific data type to the same data type without any change in the actual value. 
ex:
int num1 = 100;
long num2 = num1;

String str1 = "Hello";
String str2 = str;

4.
In Java, primitive widening conversion is a kind conversion that routinely promotes a value of a smaller data type kind to a large data type kind except any loss of data. This conversion is carried out with the aid of the Java compiler and is secure due to the fact the large data kind can keep all feasible values of the smaller data type.
 
5.
A compile-time constant is a value that can be computed by the Java compiler at compile time. The value of a compile-time constant is known and fixed before the program is executed, and the compiler can replace occurrences of the constant with its actual value throughout the code.
final double gravity = 9.81;

A run-time constant is a value that can be determined and fixed only at runtime (during the execution of the program). The value of a run-time constant depends on the program's logic or some computation at runtime and cannot be determined during the compilation phase.
final double num=Math.random();

6. 
Implicit (Automatic) Narrowing Primitive Conversions:
Implicit narrowing primitive conversions occur when a value of a larger data type is assigned to a variable of a smaller data type without any explicit casting. In this conversion, the Java compiler automatically truncates or loses some data from the larger data type to fit it into the smaller data type.
conditions - assigning value shoud be in the range and it should be a compile time constant.

Explicit Narrowing Conversions (Casting):
Explicit narrowing conversions, also known as casting, occur when a value of a larger data type is explicitly converted to a variable of a smaller data type using a cast operator. 

7.
float data type representation is differnt than the long data type representation. floats can represent large values than long data type. whether long has 64 bits and float has 32 bits, float data type can represent long data type because of teh data type representing format is different.  
When assigning a long value to a float, the Java compiler performs the conversion automatically, and no explicit casting is required. However, it is important to be aware that the float type can only precisely represent a subset of long values, and any long value with more significant bits than the float type can handle may lose precision.

8. 
Based on the combination of performance, backward compatibility and common usage in practical programming, int for integers and double for floating points use as default data types in java. These default choices allow for efficient computations, preserve backward compatibility, and make code more convenient to write and read in most cases.

9.
Backward Compatibility: When Java was first designed, the language creators needed to make decisions about which type conversions should be allowed implicitly. By allowing only the narrowing conversions among byte, char, short, and int, they ensured backward compatibility with C and C++, where similar conversions were allowed. This decision allowed existing C/C++ code that used these conversions to be more easily ported to Java.

Practicality and Common Use Cases: The four types byte, char, short, and int are the most commonly used integral types in Java for representing small and medium-sized integer values. Allowing implicit narrowing conversions among these types makes sense as they are often used interchangeably in many programming scenarios.

Data Loss Awareness: Implicit narrowing conversions may lead to data loss if the value being converted exceeds the range of the target type. By restricting implicit narrowing to a limited set of types, Java promotes awareness of potential data loss. Developers need to be explicit about their intention to lose data by performing a cast.

Safety and Readability: Allowing a wider range of implicit narrowing conversions could lead to confusion and errors in code. By restricting the set of types involved in implicit narrowing, Java promotes safer and more readable code.
















